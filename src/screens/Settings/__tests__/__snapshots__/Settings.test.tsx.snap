// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Settings /> can be rendered on [object Object] 1`] = `
<View
  onLayout={[Function]}
  style={
    Object {
      "backgroundColor": "#fff",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    data={
      Array [
        Object {
          "id": "enable",
          "onChange": [Function],
          "title": "Is it still going?",
          "type": "boolean",
          "value": "__FUTURE_NOT_READY__",
        },
        Object {
          "id": "enable-notifications",
          "onChange": [Function],
          "title": "Enable notifications",
          "type": "boolean",
          "value": "__FUTURE_NOT_READY__",
        },
        Object {
          "id": "curfew-start",
          "onChange": [Function],
          "title": "Curfew begins at:",
          "type": "time",
          "value": "__FUTURE_NOT_READY__",
        },
        Object {
          "id": "curfew-end",
          "onChange": [Function],
          "title": "Curfew is over at:",
          "type": "time",
          "value": "__FUTURE_NOT_READY__",
        },
        Object {
          "id": "go-home",
          "onChange": [Function],
          "title": "Go home minutes before:",
          "type": "number",
          "value": "__FUTURE_NOT_READY__",
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Array [
              Object {
                "borderBottomColor": "#fafafa",
                "borderBottomWidth": 1,
                "marginHorizontal": 16,
                "marginVertical": 8,
                "paddingHorizontal": 10,
                "paddingVertical": 20,
              },
              Object {
                "alignItems": "flex-start",
              },
            ]
          }
          testID="boolean-item-touchable-enable"
        >
          <Text
            style={
              Object {
                "fontSize": 24,
                "paddingBottom": 10,
              }
            }
          >
            Is it still going?
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Array [
              Object {
                "borderBottomColor": "#fafafa",
                "borderBottomWidth": 1,
                "marginHorizontal": 16,
                "marginVertical": 8,
                "paddingHorizontal": 10,
                "paddingVertical": 20,
              },
              Object {
                "alignItems": "flex-start",
              },
            ]
          }
          testID="boolean-item-touchable-enable-notifications"
        >
          <Text
            style={
              Object {
                "fontSize": 24,
                "paddingBottom": 10,
              }
            }
          >
            Enable notifications
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "borderBottomColor": "#fafafa",
              "borderBottomWidth": 1,
              "marginHorizontal": 16,
              "marginVertical": 8,
              "opacity": 1,
              "paddingHorizontal": 10,
              "paddingVertical": 20,
            }
          }
          testID="time-item-android-touchable-curfew-start"
        >
          <Text
            style={
              Object {
                "fontSize": 24,
                "paddingBottom": 10,
              }
            }
          >
            Curfew begins at:
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "borderBottomColor": "#fafafa",
              "borderBottomWidth": 1,
              "marginHorizontal": 16,
              "marginVertical": 8,
              "opacity": 1,
              "paddingHorizontal": 10,
              "paddingVertical": 20,
            }
          }
          testID="time-item-android-touchable-curfew-end"
        >
          <Text
            style={
              Object {
                "fontSize": 24,
                "paddingBottom": 10,
              }
            }
          >
            Curfew is over at:
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "borderBottomColor": "#fafafa",
              "borderBottomWidth": 1,
              "marginHorizontal": 16,
              "marginVertical": 8,
              "paddingHorizontal": 10,
              "paddingVertical": 20,
            }
          }
          testID="number-item-touchable-go-home"
        >
          <Text
            style={
              Object {
                "fontSize": 24,
                "paddingBottom": 10,
              }
            }
          >
            Go home minutes before:
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;

exports[`<Settings /> can be rendered on [object Object] 2`] = `
<View
  onLayout={[Function]}
  style={
    Array [
      Object {
        "backgroundColor": "#fff",
        "flex": 1,
      },
      Object {
        "paddingBottom": 0,
      },
    ]
  }
>
  <RCTScrollView
    data={
      Array [
        Object {
          "id": "enable",
          "onChange": [Function],
          "title": "Is it still going?",
          "type": "boolean",
          "value": "__FUTURE_NOT_READY__",
        },
        Object {
          "id": "enable-notifications",
          "onChange": [Function],
          "title": "Enable notifications",
          "type": "boolean",
          "value": "__FUTURE_NOT_READY__",
        },
        Object {
          "id": "curfew-start",
          "onChange": [Function],
          "title": "Curfew begins at:",
          "type": "time",
          "value": "__FUTURE_NOT_READY__",
        },
        Object {
          "id": "curfew-end",
          "onChange": [Function],
          "title": "Curfew is over at:",
          "type": "time",
          "value": "__FUTURE_NOT_READY__",
        },
        Object {
          "id": "go-home",
          "onChange": [Function],
          "title": "Go home minutes before:",
          "type": "number",
          "value": "__FUTURE_NOT_READY__",
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Array [
              Object {
                "borderBottomColor": "#fafafa",
                "borderBottomWidth": 1,
                "marginHorizontal": 16,
                "marginVertical": 8,
                "paddingHorizontal": 10,
                "paddingVertical": 20,
              },
              Object {
                "alignItems": "flex-start",
              },
            ]
          }
          testID="boolean-item-touchable-enable"
        >
          <Text
            style={
              Object {
                "fontSize": 24,
                "paddingBottom": 10,
              }
            }
          >
            Is it still going?
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Array [
              Object {
                "borderBottomColor": "#fafafa",
                "borderBottomWidth": 1,
                "marginHorizontal": 16,
                "marginVertical": 8,
                "paddingHorizontal": 10,
                "paddingVertical": 20,
              },
              Object {
                "alignItems": "flex-start",
              },
            ]
          }
          testID="boolean-item-touchable-enable-notifications"
        >
          <Text
            style={
              Object {
                "fontSize": 24,
                "paddingBottom": 10,
              }
            }
          >
            Enable notifications
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Object {
              "borderBottomColor": "#fafafa",
              "borderBottomWidth": 1,
              "marginHorizontal": 16,
              "marginVertical": 8,
              "paddingHorizontal": 10,
              "paddingVertical": 20,
            }
          }
        >
          <Text
            style={
              Object {
                "fontSize": 24,
                "paddingBottom": 10,
              }
            }
          >
            Curfew begins at:
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Object {
              "borderBottomColor": "#fafafa",
              "borderBottomWidth": 1,
              "marginHorizontal": 16,
              "marginVertical": 8,
              "paddingHorizontal": 10,
              "paddingVertical": 20,
            }
          }
        >
          <Text
            style={
              Object {
                "fontSize": 24,
                "paddingBottom": 10,
              }
            }
          >
            Curfew is over at:
          </Text>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "borderBottomColor": "#fafafa",
              "borderBottomWidth": 1,
              "marginHorizontal": 16,
              "marginVertical": 8,
              "paddingHorizontal": 10,
              "paddingVertical": 20,
            }
          }
          testID="number-item-touchable-go-home"
        >
          <Text
            style={
              Object {
                "fontSize": 24,
                "paddingBottom": 10,
              }
            }
          >
            Go home minutes before:
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;
